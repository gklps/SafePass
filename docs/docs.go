// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support",
            "email": "support@example.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/add_peer": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Adds a new peer to the quorum of a user's DID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DID"
                ],
                "summary": "Add peer to a DID quorum",
                "parameters": [
                    {
                        "description": "Peer details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.DIDPeerMap"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Authorization token (Bearer \u003cyour_token\u003e)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    }
                }
            }
        },
        "/create": {
            "post": {
                "description": "Register a new user and store the details in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "New user data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/main.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/create_ft": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates fungible tokens for a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "FT"
                ],
                "summary": "Create fungible tokens",
                "parameters": [
                    {
                        "description": "Fungible token creation details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.CreateFTRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Authorization token (Bearer \u003cyour_token\u003e)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    }
                }
            }
        },
        "/create_nft": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new NFT with metadata and artifact",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFT"
                ],
                "summary": "Create a non-fungible token",
                "parameters": [
                    {
                        "description": "NFT creation details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.CreateNFTRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Authorization token (Bearer \u003cyour_token\u003e)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    }
                }
            }
        },
        "/create_wallet": {
            "post": {
                "description": "Generates a key pair and assigns a DID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DID"
                ],
                "summary": "Create a new key pair",
                "parameters": [
                    {
                        "description": "Port for DID request and secret key",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.DIDRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/deploy-smart-contract": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deploys a smart contract to the Rubix network",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SmartContract"
                ],
                "summary": "Deploy a smart contract",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Rubix node port",
                        "name": "rubixNodePort",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Smart contract deployment details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.DeploySmartContractRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Authorization token (Bearer \u003cyour_token\u003e)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    }
                }
            }
        },
        "/deploy_nft": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deploys an NFT to the blockchain",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFT"
                ],
                "summary": "Deploy an NFT",
                "parameters": [
                    {
                        "description": "NFT deployment details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.DeployNFTRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Authorization token (Bearer \u003cyour_token\u003e)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    }
                }
            }
        },
        "/execute-smart-contract": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Executes a smart contract on the Rubix network",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SmartContract"
                ],
                "summary": "Execute a smart contract",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Rubix node port",
                        "name": "rubixNodePort",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Smart contract execution details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.ExecuteSmartContractRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Authorization token (Bearer \u003cyour_token\u003e)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    }
                }
            }
        },
        "/execute_nft": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Executes an NFT transaction",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFT"
                ],
                "summary": "Execute an NFT",
                "parameters": [
                    {
                        "description": "NFT execution details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.ExecuteNFTRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Authorization token (Bearer \u003cyour_token\u003e)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    }
                }
            }
        },
        "/generate-smart-contract": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Generates a smart contract using binary code, raw code, and schema files",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SmartContract"
                ],
                "summary": "Generate a smart contract",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Rubix node port",
                        "name": "rubixNodePort",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "DID for the smart contract",
                        "name": "did",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Binary code file",
                        "name": "binaryCodePath",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Raw code file",
                        "name": "rawCodePath",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Schema file",
                        "name": "schemaFilePath",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Authorization token (Bearer \u003cyour_token\u003e)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    }
                }
            }
        },
        "/get_all_ft": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all fungible tokens for a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "FT"
                ],
                "summary": "Get all fungible tokens",
                "parameters": [
                    {
                        "type": "string",
                        "description": "DID of the user",
                        "name": "did",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Authorization token (Bearer \u003cyour_token\u003e)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    }
                }
            }
        },
        "/get_all_nft": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all NFTs for a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFT"
                ],
                "summary": "Get all NFTs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "DID of the user",
                        "name": "did",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Authorization token (Bearer \u003cyour_token\u003e)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    }
                }
            }
        },
        "/get_ft_chain": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the chain of a specific fungible token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "FT"
                ],
                "summary": "Get fungible token chain",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token ID",
                        "name": "tokenID",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Authorization token (Bearer \u003cyour_token\u003e)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    }
                }
            }
        },
        "/get_nft": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves details of a specific NFT",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFT"
                ],
                "summary": "Get NFT details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "NFT ID",
                        "name": "nft",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Authorization token (Bearer \u003cyour_token\u003e)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    }
                }
            }
        },
        "/get_nft_chain": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the chain of a specific NFT",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFT"
                ],
                "summary": "Get NFT chain",
                "parameters": [
                    {
                        "type": "string",
                        "description": "NFT ID",
                        "name": "nft",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Authorization token (Bearer \u003cyour_token\u003e)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Authenticate user and return a JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login user and get JWT token",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.LoginCredentials"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/profile": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Fetch user information from the database using the JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get user profile by DID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization token (Bearer \u003cyour_token\u003e)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.User"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/rbt/unpledge": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Unpledges RBT tokens for a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RBT"
                ],
                "summary": "Unpledge RBT tokens",
                "parameters": [
                    {
                        "description": "Request to unpledge RBTs",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.ReqToRubixNode"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Authorization token (Bearer \u003cyour_token\u003e)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    }
                }
            }
        },
        "/register_did": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Publishes the user's DID in the network",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DID"
                ],
                "summary": "Register DID",
                "parameters": [
                    {
                        "description": "DID",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.ReqToRubixNode"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Authorization token (Bearer \u003cyour_token\u003e)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    }
                }
            }
        },
        "/request_balance": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the RBT balance for a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RBT"
                ],
                "summary": "Get RBT balance",
                "parameters": [
                    {
                        "type": "string",
                        "description": "DID of the user",
                        "name": "did",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Authorization token (Bearer \u003cyour_token\u003e)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    }
                }
            }
        },
        "/request_txn": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Initiates a transaction between two DIDs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Txn"
                ],
                "summary": "Request a transaction",
                "parameters": [
                    {
                        "description": "Transaction details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.TxnRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Authorization token (Bearer \u003cyour_token\u003e)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    }
                }
            }
        },
        "/setup_quorum": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "sets up the DID to be a quorum and to pledge",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DID"
                ],
                "summary": "Setup Quorum",
                "parameters": [
                    {
                        "description": "DID",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.ReqToRubixNode"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Authorization token (Bearer \u003cyour_token\u003e)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    }
                }
            }
        },
        "/sign": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Signs a transaction for a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Txn"
                ],
                "summary": "Sign a transaction",
                "parameters": [
                    {
                        "description": "Transaction signing request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.SignRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    }
                }
            }
        },
        "/submit-signed-transaction": {
            "post": {
                "description": "Submits a signed transaction response for processing",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Txn"
                ],
                "summary": "Submit a signed transaction",
                "parameters": [
                    {
                        "description": "Signed transaction response",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.SignRespData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    }
                }
            }
        },
        "/subscribe-smart-contract": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Subscribes a user to an SmartContract",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SmartContract"
                ],
                "summary": "Subscribe to an SmartContract",
                "parameters": [
                    {
                        "description": "SmartContract subscription details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.SubscribeSmartContractRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Authorization token (Bearer \u003cyour_token\u003e)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    }
                }
            }
        },
        "/subscribe_nft": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Subscribes a user to an NFT",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFT"
                ],
                "summary": "Subscribe to an NFT",
                "parameters": [
                    {
                        "description": "NFT subscription details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.SubscribeNFTRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Authorization token (Bearer \u003cyour_token\u003e)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    }
                }
            }
        },
        "/testrbt/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates test RBT tokens for a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RBT"
                ],
                "summary": "Create test RBT tokens",
                "parameters": [
                    {
                        "description": "Request to generate test RBTs",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.GenerateTestRBTRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Authorization token (Bearer \u003cyour_token\u003e)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    }
                }
            }
        },
        "/transfer_ft": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Transfers fungible tokens from one user to another",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "FT"
                ],
                "summary": "Transfer fungible tokens",
                "parameters": [
                    {
                        "description": "Fungible token transfer details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.TransferFTReq"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Authorization token (Bearer \u003cyour_token\u003e)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    }
                }
            }
        },
        "/txn/by_did": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Fetches all transactions involving the specified DID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Txn"
                ],
                "summary": "Get transactions by DID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "DID of the user",
                        "name": "did",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Role in the transaction (e.g., sender, receiver)",
                        "name": "role",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start date for filtering transactions",
                        "name": "startDate",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date for filtering transactions",
                        "name": "endDate",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Authorization token (Bearer \u003cyour_token\u003e)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.BasicResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "main.BasicResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "result": {},
                "status": {
                    "type": "boolean"
                }
            }
        },
        "main.CreateFTRequest": {
            "type": "object",
            "properties": {
                "did": {
                    "type": "string"
                },
                "ft_count": {
                    "type": "integer"
                },
                "ft_name": {
                    "type": "string"
                },
                "token_count": {
                    "type": "integer"
                }
            }
        },
        "main.CreateNFTRequest": {
            "type": "object",
            "properties": {
                "artifact": {
                    "type": "string"
                },
                "did": {
                    "type": "string"
                },
                "metadata": {
                    "type": "string"
                }
            }
        },
        "main.CreateUserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "public_key": {
                    "type": "string"
                },
                "secret_key": {
                    "type": "string"
                },
                "wallet_type": {
                    "type": "string"
                }
            }
        },
        "main.DIDPeerMap": {
            "type": "object",
            "properties": {
                "DID": {
                    "type": "string"
                },
                "DIDType": {
                    "type": "integer"
                },
                "PeerID": {
                    "type": "string"
                },
                "self_did": {
                    "type": "string"
                }
            }
        },
        "main.DIDRequest": {
            "type": "object",
            "properties": {
                "port": {
                    "type": "integer"
                },
                "public_key": {
                    "type": "string"
                },
                "secret_key": {
                    "type": "string"
                },
                "wallet_type": {
                    "type": "string"
                }
            }
        },
        "main.DIDSignature": {
            "type": "object",
            "properties": {
                "pixels": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "signature": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "main.DeployNFTRequest": {
            "type": "object",
            "properties": {
                "did": {
                    "type": "string"
                },
                "nft": {
                    "type": "string"
                },
                "quorum_type": {
                    "type": "integer"
                }
            }
        },
        "main.DeploySmartContractRequest": {
            "type": "object",
            "properties": {
                "comment": {
                    "type": "string"
                },
                "deployerAddr": {
                    "type": "string"
                },
                "quorumType": {
                    "type": "integer"
                },
                "rbtAmount": {
                    "type": "integer"
                },
                "smartContractToken": {
                    "type": "string"
                }
            }
        },
        "main.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "main.ExecuteNFTRequest": {
            "type": "object",
            "properties": {
                "comment": {
                    "type": "string"
                },
                "nft": {
                    "type": "string"
                },
                "nft_data": {
                    "type": "string"
                },
                "nft_value": {
                    "type": "number"
                },
                "owner": {
                    "type": "string"
                },
                "quorum_type": {
                    "type": "integer"
                },
                "receiver": {
                    "type": "string"
                }
            }
        },
        "main.ExecuteSmartContractRequest": {
            "type": "object",
            "required": [
                "comment",
                "executorAddr",
                "quorumType",
                "smartContractData",
                "smartContractToken"
            ],
            "properties": {
                "comment": {
                    "type": "string"
                },
                "executorAddr": {
                    "type": "string"
                },
                "quorumType": {
                    "type": "integer"
                },
                "smartContractData": {
                    "type": "string"
                },
                "smartContractToken": {
                    "type": "string"
                }
            }
        },
        "main.GenerateTestRBTRequest": {
            "type": "object",
            "properties": {
                "did": {
                    "description": "RubixNodePort string ` + "`" + `json:\"port\"` + "`" + `",
                    "type": "string"
                },
                "number_of_tokens": {
                    "type": "integer"
                }
            }
        },
        "main.LoginCredentials": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "main.ReqToRubixNode": {
            "type": "object",
            "properties": {
                "did": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                }
            }
        },
        "main.SignReqData": {
            "type": "object",
            "properties": {
                "hash": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "mode": {
                    "type": "integer"
                },
                "only_priv_key": {
                    "type": "boolean"
                }
            }
        },
        "main.SignRequest": {
            "type": "object",
            "properties": {
                "did": {
                    "type": "string"
                },
                "secret_key": {
                    "type": "string"
                },
                "sign_data": {
                    "$ref": "#/definitions/main.SignReqData"
                }
            }
        },
        "main.SignRespData": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "mode": {
                    "type": "integer"
                },
                "password": {
                    "type": "string"
                },
                "signature": {
                    "$ref": "#/definitions/main.DIDSignature"
                }
            }
        },
        "main.SubscribeNFTRequest": {
            "type": "object",
            "properties": {
                "did": {
                    "type": "string"
                },
                "nft": {
                    "type": "string"
                }
            }
        },
        "main.SubscribeSmartContractRequest": {
            "type": "object",
            "properties": {
                "did": {
                    "type": "string"
                },
                "smartContractToken": {
                    "type": "string"
                }
            }
        },
        "main.TokenResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "main.TransferFTReq": {
            "type": "object",
            "properties": {
                "comment": {
                    "type": "string"
                },
                "creatorDID": {
                    "type": "string"
                },
                "ft_count": {
                    "type": "integer"
                },
                "ft_name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "quorum_type": {
                    "type": "integer"
                },
                "receiver": {
                    "type": "string"
                },
                "sender": {
                    "type": "string"
                }
            }
        },
        "main.TxnRequest": {
            "type": "object",
            "properties": {
                "did": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                },
                "rbt_amount": {
                    "type": "number"
                },
                "receiver": {
                    "type": "string"
                }
            }
        },
        "main.User": {
            "type": "object",
            "properties": {
                "did": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Wallet API Documentation",
	Description:      "API documentation for the Wallet application.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
